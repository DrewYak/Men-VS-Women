local CELL_SIZE = 100
local BOARD_SIZE = 8
local SPEED = 300

local CHARACTER_DATA = {
	ma = {
		health = 10,
		damage_field = {
			{0, 0, 6, 0, 0},
			{0, 3, 0, 3, 0},
			{6, 0, 0, 0, 6},
			{0, 3, 0, 3, 0},
			{0, 0, 6, 0, 0}
		}
	},
	mp = {
		health = 10,
		damage_field = {
			{0, 0, 0, 0, 0},
			{0, 3, 7, 3, 0},
			{0, 7, 0, 7, 0},
			{0, 3, 7, 3, 0},
			{0, 0, 0, 0, 0}
		}
	},
	mw = {
		health = 6,
		damage_field = {
			{1, 1, 1, 1, 1},
			{1, 3, 3, 3, 1},
			{1, 3, 0, 3, 1},
			{1, 3, 3, 3, 1},
			{1, 1, 1, 1, 1}
		}
	},
	wa = {
		health = 10,
		damage_field = {
			{0, 0, 5, 0, 0},
			{0, 4, 0, 4, 0},
			{5, 0, 0, 0, 5},
			{0, 4, 0, 4, 0},
			{0, 0, 5, 0, 0}
		}
	},
	wp = {
		health = 10,
		damage_field = {
			{0, 0, 0, 0, 0},
			{0, 4, 6, 4, 0},
			{0, 6, 0, 6, 0},
			{0, 4, 6, 4, 0},
			{0, 0, 0, 0, 0}
		}
	},
	ww = {
		health = 10,
		damage_field = {
			{2, 2, 2, 2, 2},
			{2, 2, 2, 2, 2},
			{2, 2, 0, 2, 2},
			{2, 2, 2, 2, 2},
			{2, 2, 2, 2, 2}
		}
	}
}


-- ОСНОВНЫЕ ФУНКЦИИ
function init(self)
	-- Получаем ID текущего игрового объекта
	local id = go.get_id() -- Вернёт хэш, например, 'hash: [ma]'
	local id_str = string.sub(tostring(id), 9, 10) 	-- Вернёт строку, например, 'ma'

	self.data = CHARACTER_DATA[id_str]
	if self.data then
		self.health = self.data.health
		self.damage_field = self.data.damage_field
		print("Данные персонажа с id " .. id_str .. " успешно загружены")
		else
		print("Данные персонажа с id " .. id_str .. " не найдены")
	end
	
	local p = go.get_position()
	self.dest_p_x = p.x
	self.dest_p_y = p.y

	self.is_selected = false
	msg.post("#circle_sprite", "disable")

	self.is_moving = false
	sprite.play_flipbook("#character_sprite", "IDLE")
	msg.post(".", "acquire_input_focus")
	pprint(go.get_position())

	self.is_showing_damage = false

	self.damage_labels = {}
end

function on_input(self, action_id, action)
	if action_id == hash("select_character") and action.pressed and not self.is_moving then
		local p, mouse_x, mouse_y = go.get_position(), action.x, action.y
		if (math.abs(mouse_x - p.x) < CELL_SIZE / 2) and 
		(math.abs(mouse_y - p.y) < CELL_SIZE / 2) then
			self.is_selected = true
			msg.post("#circle_sprite", "enable")
		else
			self.is_selected = false
			msg.post("#circle_sprite", "disable")
		end
	end

	if self.is_selected and action_id == hash("move_character") and action.pressed then
		local mouse_x, mouse_y = action.x, action.y
		-- dtx означает destination tile x
		-- dty означает destination tile y
		local dtx, dty = math.floor(mouse_x / 100), math.floor(mouse_y / 100)
		if dtx >= 0 and dtx <= 7 and dty >= 0 and dty <= 7 then
			self.dest_p_x = CELL_SIZE / 2 + dtx * 100
			self.dest_p_y = CELL_SIZE / 2 + dty * 100
			self.is_moving = true
			sprite.play_flipbook("#character_sprite", "RUN")
		end
	
		self.is_selected = false
		msg.post("#circle_sprite", "disable")
	end		

	if self.is_selected and action_id == hash("show_damage") and action.pressed then
		-- Отображаем или скрываем информацию о наносимом уроне, 
		-- только если персонаж не движется
		if not self.is_moving then
			self.is_showing_damage = not self.is_showing_damage
			if self.is_showing_damage then
				show_damage_field(self)
			else
				hide_damage_field(self)
			end
		end
	end
end

function update(self, dt)
	local p = go.get_position()
	local direction_x, direction_y = 1, 1
	if self.dest_p_x - p.x < 0 then direction_x = -1 end
	if self.dest_p_y - p.y < 0 then direction_y = -1 end
	
	-- eps означает "эпсилон", то есть некоторую малую величину
	local eps = 1
	local delta_x = math.abs(self.dest_p_x - p.x)
	local delta_y = math.abs(self.dest_p_y - p.y)
	if self.is_moving then
		if delta_x >= eps then
			p.x = p.x + SPEED * direction_x * dt
		elseif delta_x > 0 and delta_x < eps then
			p.x = self.dest_p_x
		else
			if delta_y >= eps then
				p.y = p.y + SPEED * direction_y * dt
			else
				p.y = self.dest_p_y
				self.is_moving = false
				sprite.play_flipbook("#character_sprite", "IDLE")
			end
		end
	end
				
	go.set_position(p)
end

function final(self)
	msg.post(".", "release_input_focus")
end


-- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
function show_damage_field(self)
	print("show_damage_field")

	local character_x = go.get_position().x
	local character_y = go.get_position().y 
	
	for row = 1, #self.damage_field do
		for col = 1, #self.damage_field[row] do
			local damage = self.damage_field[row][col]
			if damage > 0 then
				-- Вычисляем смещения для координат
				local offset_x = (col - 3) * CELL_SIZE
				local offset_y = (row - 3) * CELL_SIZE

				-- Вычисляем координаты для отображения урона
				local x = character_x + offset_x
				local y = character_y + offset_y

				-- Проверяем, оказались ли координаты
				-- за пределами игровой доски
				local cell_x = math.floor(x / CELL_SIZE) + 1
				local cell_y = math.floor(y / CELL_SIZE) + 1
				if cell_x >= 1 and cell_x <= BOARD_SIZE and cell_y >= 1 and cell_y <= BOARD_SIZE then
					local label_id = factory.create("#label_factory", vmath.vector3(x, y, 0))								
					label.set_text(label_id, tostring(damage))
					table.insert(self.damage_labels, label_id)
				end
			end
		end
	end
end

function hide_damage_field(self)
	print("hide_damage_field")

	for _, label_id in ipairs(self.damage_labels) do
		go.delete(label_id)
	end

	self.damage_labels = {}
end

